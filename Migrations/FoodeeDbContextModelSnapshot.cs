// <auto-generated />
using System;
using FOODEE.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FOODEE.Migrations
{
    [DbContext(typeof(FoodeeDbContext))]
    partial class FoodeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FOODEE.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });
            modelBuilder.Entity("FOODEE.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");
<<<<<<< HEAD

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");
=======
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");
                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");
>>>>>>> origin/Views

                    b.Property<string>("Name")
                        .HasColumnType("text");
                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("FOODEE.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");
                    b.HasIndex("MenuId");
                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("FOODEE.Models.MenuMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuMenuItems");
                });

            modelBuilder.Entity("FOODEE.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

<<<<<<< HEAD
                    b.Property<DateTime?>("DateLastModified")
=======
                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLastModified")
>>>>>>> origin/Views
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");
                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FOODEE.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

<<<<<<< HEAD
=======
                    b.Property<int?>("MenuMenuItemId")
                        .HasColumnType("int");
                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

>>>>>>> origin/Views
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");
                    b.HasIndex("MenuMenuItemId");
                    b.HasIndex("OrderId");

                    b.HasIndex("MenuId", "OrderId")
                        .IsUnique();

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FOODEE.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

<<<<<<< HEAD
                    b.Property<DateTime?>("DateLastModified")
=======
                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");
                    b.Property<DateTime>("DateLastModified")
>>>>>>> origin/Views
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FOODEE.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 9, 4, 14, 38, 22, 880, DateTimeKind.Local).AddTicks(481),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 9, 4, 14, 38, 22, 880, DateTimeKind.Local).AddTicks(781),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 9, 4, 14, 38, 22, 880, DateTimeKind.Local).AddTicks(795),
                            Name = "Customer"
                        });
                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FOODEE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")

                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);


                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("HashSalt")
                        .HasColumnType("text");

                    b.Property<string>("LastName")

                        .HasColumnType("text");

<<<<<<< HEAD
=======
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);


                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

>>>>>>> origin/Views
                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");


                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Asero,Abk",
                            CreatedAt = new DateTime(2021, 9, 4, 14, 38, 22, 856, DateTimeKind.Local).AddTicks(6384),
                            Email = "olowonmiadejoke@gmail.com",
                            FirstName = "Habeebah",
                            Gender = "Female",
                            HashSalt = "oRG1o9cidyVnRFgsWQN7AA==",
                            LastName = "Olowonmi",
                            PasswordHash = "HH0bJTATP53nCkvQPacCkjlviZs1bb+BpbyrtOhOHgc=",
                            PhoneNumber = 9039513977L
                        });

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.ToTable("Users");

                });

            modelBuilder.Entity("FOODEE.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");


                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 9, 4, 14, 38, 22, 881, DateTimeKind.Local).AddTicks(9783),
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FOODEE.Models.MenuMenuItem", b =>
                {
                    b.HasOne("FOODEE.Models.Menu", "Manu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FOODEE.Models.MenuItem", "MenuItem")
                        .WithMany("Menus")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)

                });

            modelBuilder.Entity("FOODEE.Models.MenuItem", b =>
                {
                    b.HasOne("FOODEE.Models.Menu", "Menu")
                        .WithMany("MenuItem")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)

                        .IsRequired();
                });

            modelBuilder.Entity("FOODEE.Models.Order", b =>
                {

                    b.HasOne("FOODEE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")

                    b.HasOne("FOODEE.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")

                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FOODEE.Models.OrderItem", b =>
                {

                    b.HasOne("FOODEE.Models.MenuItem", "MenuItem")

                    b.HasOne("FOODEE.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOODEE.Models.MenuItem", null)

                        .WithMany("OrderItem")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();


                    b.HasOne("FOODEE.Models.Order", "Order")
                        .WithMany("OrderItems")

                    b.HasOne("FOODEE.Models.MenuMenuItem", "MenuMenuItem")
                        .WithMany()
                        .HasForeignKey("MenuMenuItemId");

                    b.HasOne("FOODEE.Models.Order", "Order")
                        .WithMany("OrderItem")

                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FOODEE.Models.Payment", b =>
                {


                    b.HasOne("FOODEE.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();


                    b.HasOne("FOODEE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FOODEE.Models.UserRole", b =>
                {

                    b.HasOne("FOODEE.Models.Role", "Role")
                        .WithMany("UserRoles")

                    b.HasOne("FOODEE.Models.Role", null)
                        .WithMany("UserRole")

                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOODEE.Models.User", "User")
                        .WithMany("UserRoles")
<<<<<<< HEAD
                        .HasForeignKey("UserId")
=======

                    b.HasOne("FOODEE.Models.User", null)
                        .WithMany("UserRole")

                        .HasForeignKey("userId")
>>>>>>> origin/Views
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
